// cynes - C/C++ NES emulator with Python bindings
// Copyright (C) 2021  Combey Theo <https://www.gnu.org/licenses/>

#ifndef __CYNES_EMULATOR_H__
#define __CYNES_EMULATOR_H__

#include <cstdint>
#include <cstring>


namespace cynes {
    enum class DumpOperation {
        SIZE, DUMP, LOAD
    };

    template<DumpOperation operation, class T>
    void dump(uint8_t*& buffer, T& value) {
        switch (operation) {
        case DumpOperation::DUMP: memcpy(buffer, &value, sizeof(T)); buffer += sizeof(T); return;
        case DumpOperation::LOAD: memcpy(&value, buffer, sizeof(T)); buffer += sizeof(T); return;
        }
    }

    template<DumpOperation operation, class T>
    void dump(unsigned int& bufferSize, T& value) {
        if (operation == DumpOperation::SIZE) bufferSize += sizeof(T);
    }

    template<DumpOperation operation, class T>
    void dump(uint8_t*& buffer, T* values, unsigned int size) {
        switch (operation) {
        case DumpOperation::DUMP: memcpy(buffer, values, sizeof(T) * size); buffer += sizeof(T) * size; return;
        case DumpOperation::LOAD: memcpy(values, buffer, sizeof(T) * size); buffer += sizeof(T) * size; return;
        }
    }

    template<DumpOperation operation, class T>
    void dump(unsigned int& bufferSize, T* value, unsigned int size) {
        if (operation == DumpOperation::SIZE) bufferSize += sizeof(T) * size;
    }

	class CPU;
	class PPU;
	class APU;

	class Mapper;

	class NES {
	public:
		NES(const char* path);
		~NES();

	public:
		CPU* getCPU();
		PPU* getPPU();
		APU* getAPU();

		Mapper* getMapper();

	public:
		void reset();

		void dummyRead();

		void write(uint16_t address, uint8_t value);
		void writeCPU(uint16_t address, uint8_t value);
		void writePPU(uint16_t address, uint8_t value);
		void writeOAM(uint8_t address, uint8_t value);

		uint8_t read(uint16_t address);
		uint8_t readCPU(uint16_t address);
		uint8_t readPPU(uint16_t address);
		uint8_t readOAM(uint8_t address);

		bool step(uint8_t* buffer, unsigned int frames);

		unsigned int size();

		void save(uint8_t* buffer);
		void load(uint8_t* buffer);

		void setControllerState(uint8_t state);

	private:
		CPU* _cpu;
		PPU* _ppu;
		APU* _apu;

		Mapper* _mapper;

	private:
		uint8_t _memoryCPU[0x800];

		uint8_t _memoryOAM[0x100];
		uint8_t _memoryVideo[0x1000];
		uint8_t _memoryPalette[0x20];

		uint8_t _memoryExtraRAM[0x2000];

		uint8_t* _memoryPRG;
		uint8_t* _memoryCHR;

		uint8_t _controllerState;
		uint8_t _controllerShifter;

	private:
		void loadMapper(const char* rom);

		void loadControllerShifter(bool polling);

		uint8_t pollController();

	private:
		template<DumpOperation operation, class T> void dump(T& buffer);
	};

    class CPU {
    public:
        CPU(NES& nes);
        ~CPU();

    public:
        void power();
        void reset();

        void tick();
        void poll();

        void setNMI(bool nmi);
        void setMapperIRQ(bool irq);
        void setFrameIRQ(bool irq);
        void setDeltaIRQ(bool irq);

        bool isFrozen() const;

    private:
        NES& _nes;

    private:
        bool _frozen;

        uint8_t _registerA;
        uint8_t _registerX;
        uint8_t _registerY;
        uint8_t _registerM;
        uint8_t _stackPointer;

        uint16_t _programCounter;

        uint8_t fetch();

    private:
        bool _delayIRQ;
        bool _shouldIRQ;

        bool _lineMapperIRQ;
        bool _lineFrameIRQ;
        bool _lineDeltaIRQ;

        bool _lineNMI;
        bool _edgeDetectorNMI;

        bool _delayNMI;
        bool _shouldNMI;

    private:
        uint8_t _status;

        void setStatus(uint8_t flag, bool value);
        bool getStatus(uint8_t flag) const;

        enum Flag : uint8_t {
            C = 0x01, Z = 0x02, I = 0x04, D = 0x08, B = 0x10, U = 0x20, V = 0x40, N = 0x80
        };

    private:
        uint16_t _targetAddress;

        void ABR(); void ABW(); void ACC(); void AXM(); void AXR(); void AXW(); void AYM(); void AYR();
        void AYW(); void IMM(); void IMP(); void IND(); void IXR(); void IXW(); void IYM(); void IYR();
        void IYW(); void REL(); void ZPR(); void ZPW(); void ZXR(); void ZXW(); void ZYR(); void ZYW();

        void (CPU::* _addressingModes[256]) (void);

    private:
        void AAL(); void ADC(); void ALR(); void ANC(); void AND(); void ANE(); void ARR(); void ASL();
        void BCC(); void BCS(); void BEQ(); void BIT(); void BMI(); void BNE(); void BPL(); void BRK();
        void BVC(); void BVS(); void CLC(); void CLD(); void CLI(); void CLV(); void CMP(); void CPX();
        void CPY(); void DCP(); void DEC(); void DEX(); void DEY(); void EOR(); void INC(); void INX();
        void INY(); void ISC(); void JAM(); void JMP(); void JSR(); void LAR(); void LAS(); void LAX();
        void LDA(); void LDX(); void LDY(); void LSR(); void LXA(); void NOP(); void ORA(); void PHA();
        void PHP(); void PLA(); void PLP(); void RAL(); void RAR(); void RLA(); void ROL(); void ROR();
        void RRA(); void RTI(); void RTS(); void SAX(); void SBC(); void SBX(); void SEC(); void SED();
        void SEI(); void SHA(); void SHX(); void SHY(); void SLO(); void SRE(); void STA(); void STX();
        void STY(); void TAS(); void TAX(); void TAY(); void TSX(); void TXA(); void TXS(); void TYA();
        void USB();

        void (CPU::* _instructions[256]) (void);

    public:
        template<DumpOperation operation, class T> void dump(T& buffer) {
            cynes::dump<operation>(buffer, _frozen);
            cynes::dump<operation>(buffer, _registerA);
            cynes::dump<operation>(buffer, _registerX);
            cynes::dump<operation>(buffer, _registerY);
            cynes::dump<operation>(buffer, _registerM);
            cynes::dump<operation>(buffer, _stackPointer);
            cynes::dump<operation>(buffer, _programCounter);
            cynes::dump<operation>(buffer, _targetAddress);
            cynes::dump<operation>(buffer, _status);

            cynes::dump<operation>(buffer, _delayIRQ);
            cynes::dump<operation>(buffer, _shouldIRQ);
            cynes::dump<operation>(buffer, _lineMapperIRQ);
            cynes::dump<operation>(buffer, _lineFrameIRQ);
            cynes::dump<operation>(buffer, _lineDeltaIRQ);
            cynes::dump<operation>(buffer, _lineNMI);
            cynes::dump<operation>(buffer, _edgeDetectorNMI);
            cynes::dump<operation>(buffer, _delayNMI);
            cynes::dump<operation>(buffer, _shouldNMI);
        }
    };

	class PPU {
	public:
		PPU(NES& nes);
		~PPU();

	public:
		void power();
		void reset();

		void tick();

		void write(uint8_t addr, uint8_t value);

		uint8_t read(uint8_t addr);

		uint8_t* getFrameBuffer();

		bool isFrameReady();

	private:
		NES& _nes;

	private:
		uint16_t _pixelX;
		uint16_t _pixelY;

		uint8_t _frameBuffer[0x2D000];

		bool _frameReady;

		bool _renderingEnabled;
		bool _renderingEnabledDelayed;
		bool _preventVerticalBlank;

		void writeAndNotifyA12(uint16_t addr, uint8_t value);

		uint8_t readAndNotifyA12(uint16_t addr);

	private:
		bool _controlIncrementMode;
		bool _controlForegroundTable;
		bool _controlBackgroundTable;
		bool _controlForegroundLarge;
		bool _controlInterruptOnVertivalBlank;

	private:
		bool _maskGreyscaleMode;
		bool _maskRenderBackgroundLeft;
		bool _maskRenderForegroundLeft;
		bool _maskRenderBackground;
		bool _maskRenderForeground;

		uint8_t _maskColorEmphasize;

	private:
		bool _statusSpriteOverflow;
		bool _statusSpriteZeroHit;
		bool _statusVerticalBlank;

	private:
		const uint8_t DECAY_PERIOD = 30;

		uint8_t _clockDecays[3];

		uint8_t _registerDecay;

	private:
		bool _latchCycle;
		bool _latchAddress;

		uint16_t _registerT;
		uint16_t _registerV;
		uint16_t _delayedRegisterV;

		uint8_t _scrollX;

		uint8_t _delayDataRead;
		uint8_t _delayDataWrite;
		uint8_t _bufferData;

		void incrementScrollX();
		void incrementScrollY();

		void resetScrollX();
		void resetScrollY();

	private:
		uint8_t _backgroundData[0x4];
		uint16_t _backgroundShifter[0x4];

		void loadBackgroundShifters();
		void updateBackgroundShifters();

	private:
		uint8_t _foregroundData[0x20];
		uint8_t _foregroundShifter[0x10];
		uint8_t _foregroundAttributes[0x8];
		uint8_t _foregroundPositions[0x8];

		uint8_t _foregroundDataPointer;
		uint8_t _foregroundSpriteCount;
		uint8_t _foregroundSpriteCountNext;
		uint8_t _foregroundSpritePointer;
		uint8_t _foregroundReadDelay;

		uint16_t _foregroundSpriteAddress;

		bool _foregroundSpriteZeroLine;
		bool _foregroundSpriteZeroShould;
		bool _foregroundSpriteZeroHit;

		enum class SpriteEvaluationStep {
			LOAD_SECONDARY_OAM, INCREMENT_POINTER, IDLE
		} _foregroundEvaluationStep;

		void resetForegroundData();
		void clearForegroundData();
		void fetchForegroundData();
		void loadForegroundShifter();
		void updateForegroundShifter();

		uint8_t blend();

	private:
		enum Register : uint8_t {
			PPU_CTRL = 0x00, PPU_MASK = 0x01, PPU_STATUS = 0x02, OAM_ADDR = 0x03,
			OAM_DATA = 0x04, PPU_SCROLL = 0x05, PPU_ADDR = 0x06, PPU_DATA = 0x07
		};

	private:
		const uint8_t PALETTE_COLORS[0x8][0x40][0x3] = {
			0x54, 0x54, 0x54, 0x00, 0x1E, 0x74, 0x08, 0x10, 0x90, 0x30, 0x00, 0x88, 0x44, 0x00, 0x64, 0x5C,
			0x00, 0x30, 0x54, 0x04, 0x00, 0x3C, 0x18, 0x00, 0x20, 0x2A, 0x00, 0x08, 0x3A, 0x00, 0x00, 0x40,
			0x00, 0x00, 0x3C, 0x00, 0x00, 0x32, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x98, 0x96, 0x98, 0x08, 0x4C, 0xC4, 0x30, 0x32, 0xEC, 0x5C, 0x1E, 0xE4, 0x88, 0x14, 0xB0, 0xA0,
			0x14, 0x64, 0x98, 0x22, 0x20, 0x78, 0x3C, 0x00, 0x54, 0x5A, 0x00, 0x28, 0x72, 0x00, 0x08, 0x7C,
			0x00, 0x00, 0x76, 0x28, 0x00, 0x66, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xEC, 0xEE, 0xEC, 0x4C, 0x9A, 0xEC, 0x78, 0x7C, 0xEC, 0xB0, 0x62, 0xEC, 0xE4, 0x54, 0xEC, 0xEC,
			0x58, 0xB4, 0xEC, 0x6A, 0x64, 0xD4, 0x88, 0x20, 0xA0, 0xAA, 0x00, 0x74, 0xC4, 0x00, 0x4C, 0xD0,
			0x20, 0x38, 0xCC, 0x6C, 0x38, 0xB4, 0xCC, 0x3C, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xEC, 0xEE, 0xEC, 0xA8, 0xCC, 0xEC, 0xBC, 0xBC, 0xEC, 0xD4, 0xB2, 0xEC, 0xEC, 0xAE, 0xEC, 0xEC,
			0xAE, 0xD4, 0xEC, 0xB4, 0xB0, 0xE4, 0xC4, 0x90, 0xCC, 0xD2, 0x78, 0xB4, 0xDE, 0x78, 0xA8, 0xE2,
			0x90, 0x98, 0xE2, 0xB4, 0xA0, 0xD6, 0xE4, 0xA0, 0xA2, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x5C, 0x4B, 0x4B, 0x00, 0x1B, 0x68, 0x08, 0x0E, 0x81, 0x34, 0x00, 0x7A, 0x4A, 0x00, 0x5A, 0x65,
			0x00, 0x2B, 0x5C, 0x03, 0x00, 0x42, 0x15, 0x00, 0x23, 0x25, 0x00, 0x08, 0x34, 0x00, 0x00, 0x39,
			0x00, 0x00, 0x36, 0x00, 0x00, 0x2D, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xA7, 0x87, 0x88, 0x08, 0x44, 0xB0, 0x34, 0x2D, 0xD4, 0x65, 0x1B, 0xCD, 0x95, 0x12, 0x9E, 0xB0,
			0x12, 0x5A, 0xA7, 0x1E, 0x1C, 0x84, 0x36, 0x00, 0x5C, 0x51, 0x00, 0x2C, 0x66, 0x00, 0x08, 0x6F,
			0x00, 0x00, 0x6A, 0x24, 0x00, 0x5B, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xD6, 0xD4, 0x53, 0x8A, 0xD4, 0x84, 0x6F, 0xD4, 0xC1, 0x58, 0xD4, 0xFA, 0x4B, 0xD4, 0xFF,
			0x4F, 0xA2, 0xFF, 0x5F, 0x5A, 0xE9, 0x7A, 0x1C, 0xB0, 0x99, 0x00, 0x7F, 0xB0, 0x00, 0x53, 0xBB,
			0x1C, 0x3D, 0xB7, 0x61, 0x3D, 0xA2, 0xB7, 0x42, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xD6, 0xD4, 0xB8, 0xB7, 0xD4, 0xCE, 0xA9, 0xD4, 0xE9, 0xA0, 0xD4, 0xFF, 0x9C, 0xD4, 0xFF,
			0x9C, 0xBE, 0xFF, 0xA2, 0x9E, 0xFA, 0xB0, 0x81, 0xE0, 0xBD, 0x6C, 0xC6, 0xC7, 0x6C, 0xB8, 0xCB,
			0x81, 0xA7, 0xCB, 0xA2, 0xB0, 0xC0, 0xCD, 0xB0, 0x91, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x4B, 0x5C, 0x4B, 0x00, 0x21, 0x68, 0x07, 0x11, 0x81, 0x2B, 0x00, 0x7A, 0x3D, 0x00, 0x5A, 0x52,
			0x00, 0x2B, 0x4B, 0x04, 0x00, 0x36, 0x1A, 0x00, 0x1C, 0x2E, 0x00, 0x07, 0x3F, 0x00, 0x00, 0x46,
			0x00, 0x00, 0x42, 0x00, 0x00, 0x37, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x88, 0xA5, 0x88, 0x07, 0x53, 0xB0, 0x2B, 0x37, 0xD4, 0x52, 0x21, 0xCD, 0x7A, 0x16, 0x9E, 0x90,
			0x16, 0x5A, 0x88, 0x25, 0x1C, 0x6C, 0x42, 0x00, 0x4B, 0x63, 0x00, 0x24, 0x7D, 0x00, 0x07, 0x88,
			0x00, 0x00, 0x81, 0x24, 0x00, 0x70, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xD4, 0xFF, 0xD4, 0x44, 0xA9, 0xD4, 0x6C, 0x88, 0xD4, 0x9E, 0x6B, 0xD4, 0xCD, 0x5C, 0xD4, 0xD4,
			0x60, 0xA2, 0xD4, 0x74, 0x5A, 0xBE, 0x95, 0x1C, 0x90, 0xBB, 0x00, 0x68, 0xD7, 0x00, 0x44, 0xE4,
			0x1C, 0x32, 0xE0, 0x61, 0x32, 0xC6, 0xB7, 0x36, 0x42, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xD4, 0xFF, 0xD4, 0x97, 0xE0, 0xD4, 0xA9, 0xCE, 0xD4, 0xBE, 0xC3, 0xD4, 0xD4, 0xBF, 0xD4, 0xD4,
			0xBF, 0xBE, 0xD4, 0xC6, 0x9E, 0xCD, 0xD7, 0x81, 0xB7, 0xE7, 0x6C, 0xA2, 0xF4, 0x6C, 0x97, 0xF8,
			0x81, 0x88, 0xF8, 0xA2, 0x90, 0xEB, 0xCD, 0x90, 0xB2, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x53, 0x53, 0x44, 0x00, 0x1D, 0x5D, 0x07, 0x0F, 0x74, 0x2F, 0x00, 0x6E, 0x43, 0x00, 0x51, 0x5B,
			0x00, 0x26, 0x53, 0x03, 0x00, 0x3B, 0x17, 0x00, 0x1F, 0x29, 0x00, 0x07, 0x39, 0x00, 0x00, 0x3F,
			0x00, 0x00, 0x3B, 0x00, 0x00, 0x31, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x96, 0x94, 0x7B, 0x07, 0x4B, 0x9E, 0x2F, 0x31, 0xBF, 0x5B, 0x1D, 0xB8, 0x86, 0x13, 0x8E, 0x9E,
			0x13, 0x51, 0x96, 0x21, 0x19, 0x76, 0x3B, 0x00, 0x53, 0x59, 0x00, 0x27, 0x70, 0x00, 0x07, 0x7A,
			0x00, 0x00, 0x74, 0x20, 0x00, 0x64, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xE9, 0xEB, 0xBF, 0x4B, 0x98, 0xBF, 0x76, 0x7A, 0xBF, 0xAE, 0x61, 0xBF, 0xE1, 0x53, 0xBF, 0xE9,
			0x57, 0x91, 0xE9, 0x68, 0x51, 0xD1, 0x86, 0x19, 0x9E, 0xA8, 0x00, 0x72, 0xC2, 0x00, 0x4B, 0xCD,
			0x19, 0x37, 0xC9, 0x57, 0x37, 0xB2, 0xA5, 0x3B, 0x3B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xE9, 0xEB, 0xBF, 0xA6, 0xC9, 0xBF, 0xBA, 0xBA, 0xBF, 0xD1, 0xB0, 0xBF, 0xE9, 0xAC, 0xBF, 0xE9,
			0xAC, 0xAB, 0xE9, 0xB2, 0x8E, 0xE1, 0xC2, 0x74, 0xC9, 0xCF, 0x61, 0xB2, 0xDB, 0x61, 0xA6, 0xDF,
			0x74, 0x96, 0xDF, 0x91, 0x9E, 0xD3, 0xB8, 0x9E, 0xA0, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x4B, 0x4B, 0x5C, 0x00, 0x1B, 0x7F, 0x07, 0x0E, 0x9E, 0x2B, 0x00, 0x95, 0x3D, 0x00, 0x6E, 0x52,
			0x00, 0x34, 0x4B, 0x03, 0x00, 0x36, 0x15, 0x00, 0x1C, 0x25, 0x00, 0x07, 0x34, 0x00, 0x00, 0x39,
			0x00, 0x00, 0x36, 0x00, 0x00, 0x2D, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x88, 0x87, 0xA7, 0x07, 0x44, 0xD7, 0x2B, 0x2D, 0xFF, 0x52, 0x1B, 0xFA, 0x7A, 0x12, 0xC1, 0x90,
			0x12, 0x6E, 0x88, 0x1E, 0x23, 0x6C, 0x36, 0x00, 0x4B, 0x51, 0x00, 0x24, 0x66, 0x00, 0x07, 0x6F,
			0x00, 0x00, 0x6A, 0x2C, 0x00, 0x5B, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xD4, 0xD6, 0xFF, 0x44, 0x8A, 0xFF, 0x6C, 0x6F, 0xFF, 0x9E, 0x58, 0xFF, 0xCD, 0x4B, 0xFF, 0xD4,
			0x4F, 0xC6, 0xD4, 0x5F, 0x6E, 0xBE, 0x7A, 0x23, 0x90, 0x99, 0x00, 0x68, 0xB0, 0x00, 0x44, 0xBB,
			0x23, 0x32, 0xB7, 0x76, 0x32, 0xA2, 0xE0, 0x36, 0x36, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xD4, 0xD6, 0xFF, 0x97, 0xB7, 0xFF, 0xA9, 0xA9, 0xFF, 0xBE, 0xA0, 0xFF, 0xD4, 0x9C, 0xFF, 0xD4,
			0x9C, 0xE9, 0xD4, 0xA2, 0xC1, 0xCD, 0xB0, 0x9E, 0xB7, 0xBD, 0x84, 0xA2, 0xC7, 0x84, 0x97, 0xCB,
			0x9E, 0x88, 0xCB, 0xC6, 0x90, 0xC0, 0xFA, 0x90, 0x91, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x53, 0x44, 0x53, 0x00, 0x18, 0x72, 0x07, 0x0C, 0x8E, 0x2F, 0x00, 0x86, 0x43, 0x00, 0x63, 0x5B,
			0x00, 0x2F, 0x53, 0x03, 0x00, 0x3B, 0x13, 0x00, 0x1F, 0x22, 0x00, 0x07, 0x2E, 0x00, 0x00, 0x33,
			0x00, 0x00, 0x30, 0x00, 0x00, 0x28, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x96, 0x79, 0x96, 0x07, 0x3D, 0xC2, 0x2F, 0x28, 0xE9, 0x5B, 0x18, 0xE1, 0x86, 0x10, 0xAE, 0x9E,
			0x10, 0x63, 0x96, 0x1B, 0x1F, 0x76, 0x30, 0x00, 0x53, 0x48, 0x00, 0x27, 0x5C, 0x00, 0x07, 0x64,
			0x00, 0x00, 0x5F, 0x27, 0x00, 0x52, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xE9, 0xC0, 0xE9, 0x4B, 0x7C, 0xE9, 0x76, 0x64, 0xE9, 0xAE, 0x4F, 0xE9, 0xE1, 0x44, 0xE9, 0xE9,
			0x47, 0xB2, 0xE9, 0x55, 0x63, 0xD1, 0x6E, 0x1F, 0x9E, 0x89, 0x00, 0x72, 0x9E, 0x00, 0x4B, 0xA8,
			0x1F, 0x37, 0xA5, 0x6A, 0x37, 0x91, 0xC9, 0x3B, 0x30, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xE9, 0xC0, 0xE9, 0xA6, 0xA5, 0xE9, 0xBA, 0x98, 0xE9, 0xD1, 0x90, 0xE9, 0xE9, 0x8C, 0xE9, 0xE9,
			0x8C, 0xD1, 0xE9, 0x91, 0xAE, 0xE1, 0x9E, 0x8E, 0xC9, 0xAA, 0x76, 0xB2, 0xB3, 0x76, 0xA6, 0xB7,
			0x8E, 0x96, 0xB7, 0xB2, 0x9E, 0xAD, 0xE1, 0x9E, 0x83, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x44, 0x53, 0x53, 0x00, 0x1D, 0x72, 0x06, 0x0F, 0x8E, 0x26, 0x00, 0x86, 0x37, 0x00, 0x63, 0x4A,
			0x00, 0x2F, 0x44, 0x03, 0x00, 0x30, 0x17, 0x00, 0x19, 0x29, 0x00, 0x06, 0x39, 0x00, 0x00, 0x3F,
			0x00, 0x00, 0x3B, 0x00, 0x00, 0x31, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x7B, 0x94, 0x96, 0x06, 0x4B, 0xC2, 0x26, 0x31, 0xE9, 0x4A, 0x1D, 0xE1, 0x6E, 0x13, 0xAE, 0x81,
			0x13, 0x63, 0x7B, 0x21, 0x1F, 0x61, 0x3B, 0x00, 0x44, 0x59, 0x00, 0x20, 0x70, 0x00, 0x06, 0x7A,
			0x00, 0x00, 0x74, 0x27, 0x00, 0x64, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xBF, 0xEB, 0xE9, 0x3D, 0x98, 0xE9, 0x61, 0x7A, 0xE9, 0x8E, 0x61, 0xE9, 0xB8, 0x53, 0xE9, 0xBF,
			0x57, 0xB2, 0xBF, 0x68, 0x63, 0xAB, 0x86, 0x1F, 0x81, 0xA8, 0x00, 0x5D, 0xC2, 0x00, 0x3D, 0xCD,
			0x1F, 0x2D, 0xC9, 0x6A, 0x2D, 0xB2, 0xC9, 0x30, 0x3B, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xBF, 0xEB, 0xE9, 0x88, 0xC9, 0xE9, 0x98, 0xBA, 0xE9, 0xAB, 0xB0, 0xE9, 0xBF, 0xAC, 0xE9, 0xBF,
			0xAC, 0xD1, 0xBF, 0xB2, 0xAE, 0xB8, 0xC2, 0x8E, 0xA5, 0xCF, 0x76, 0x91, 0xDB, 0x76, 0x88, 0xDF,
			0x8E, 0x7B, 0xDF, 0xB2, 0x81, 0xD3, 0xE1, 0x81, 0xA0, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x4A, 0x4A, 0x4A, 0x00, 0x1A, 0x67, 0x07, 0x0E, 0x80, 0x2A, 0x00, 0x79, 0x3C, 0x00, 0x59, 0x51,
			0x00, 0x2A, 0x4A, 0x03, 0x00, 0x35, 0x15, 0x00, 0x1C, 0x25, 0x00, 0x07, 0x33, 0x00, 0x00, 0x39,
			0x00, 0x00, 0x35, 0x00, 0x00, 0x2C, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x87, 0x85, 0x87, 0x07, 0x43, 0xAE, 0x2A, 0x2C, 0xD2, 0x51, 0x1A, 0xCB, 0x79, 0x11, 0x9C, 0x8E,
			0x11, 0x59, 0x87, 0x1E, 0x1C, 0x6A, 0x35, 0x00, 0x4A, 0x50, 0x00, 0x23, 0x65, 0x00, 0x07, 0x6E,
			0x00, 0x00, 0x69, 0x23, 0x00, 0x5A, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xD2, 0xD4, 0xD2, 0x43, 0x89, 0xD2, 0x6A, 0x6E, 0xD2, 0x9C, 0x57, 0xD2, 0xCB, 0x4A, 0xD2, 0xD2,
			0x4E, 0xA0, 0xD2, 0x5E, 0x59, 0xBC, 0x79, 0x1C, 0x8E, 0x97, 0x00, 0x67, 0xAE, 0x00, 0x43, 0xB9,
			0x1C, 0x31, 0xB5, 0x60, 0x31, 0xA0, 0xB5, 0x35, 0x35, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xD2, 0xD4, 0xD2, 0x95, 0xB5, 0xD2, 0xA7, 0xA7, 0xD2, 0xBC, 0x9E, 0xD2, 0xD2, 0x9B, 0xD2, 0xD2,
			0x9B, 0xBC, 0xD2, 0xA0, 0x9C, 0xCB, 0xAE, 0x80, 0xB5, 0xBB, 0x6A, 0xA0, 0xC5, 0x6A, 0x95, 0xC9,
			0x80, 0x87, 0xC9, 0xA0, 0x8E, 0xBE, 0xCB, 0x8E, 0x90, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};

	public:
		template<DumpOperation operation, class T> void dump(T& buffer) {
			cynes::dump<operation>(buffer, _pixelX);
			cynes::dump<operation>(buffer, _pixelY);
			cynes::dump<operation>(buffer, _frameReady);
			cynes::dump<operation>(buffer, _renderingEnabled);
			cynes::dump<operation>(buffer, _renderingEnabledDelayed);
			cynes::dump<operation>(buffer, _preventVerticalBlank);

			cynes::dump<operation>(buffer, _controlIncrementMode);
			cynes::dump<operation>(buffer, _controlForegroundTable);
			cynes::dump<operation>(buffer, _controlBackgroundTable);
			cynes::dump<operation>(buffer, _controlForegroundLarge);
			cynes::dump<operation>(buffer, _controlInterruptOnVertivalBlank);

			cynes::dump<operation>(buffer, _maskGreyscaleMode);
			cynes::dump<operation>(buffer, _maskRenderBackgroundLeft);
			cynes::dump<operation>(buffer, _maskRenderForegroundLeft);
			cynes::dump<operation>(buffer, _maskRenderBackground);
			cynes::dump<operation>(buffer, _maskRenderForeground);
			cynes::dump<operation>(buffer, _maskColorEmphasize);

			cynes::dump<operation>(buffer, _statusSpriteOverflow);
			cynes::dump<operation>(buffer, _statusSpriteZeroHit);
			cynes::dump<operation>(buffer, _statusVerticalBlank);

			cynes::dump<operation>(buffer, _clockDecays);
			cynes::dump<operation>(buffer, _registerDecay);

			cynes::dump<operation>(buffer, _latchCycle);
			cynes::dump<operation>(buffer, _latchAddress);
			cynes::dump<operation>(buffer, _registerT);
			cynes::dump<operation>(buffer, _registerV);
			cynes::dump<operation>(buffer, _delayedRegisterV);
			cynes::dump<operation>(buffer, _scrollX);
			cynes::dump<operation>(buffer, _delayDataRead);
			cynes::dump<operation>(buffer, _delayDataWrite);
			cynes::dump<operation>(buffer, _bufferData);

			cynes::dump<operation>(buffer, _backgroundData);
			cynes::dump<operation>(buffer, _backgroundShifter);

			cynes::dump<operation>(buffer, _foregroundData);
			cynes::dump<operation>(buffer, _foregroundShifter);
			cynes::dump<operation>(buffer, _foregroundAttributes);
			cynes::dump<operation>(buffer, _foregroundPositions);
			cynes::dump<operation>(buffer, _foregroundDataPointer);
			cynes::dump<operation>(buffer, _foregroundSpriteCount);
			cynes::dump<operation>(buffer, _foregroundSpriteCountNext);
			cynes::dump<operation>(buffer, _foregroundSpritePointer);
			cynes::dump<operation>(buffer, _foregroundReadDelay);
			cynes::dump<operation>(buffer, _foregroundSpriteAddress);
			cynes::dump<operation>(buffer, _foregroundSpriteZeroLine);
			cynes::dump<operation>(buffer, _foregroundSpriteZeroShould);
			cynes::dump<operation>(buffer, _foregroundSpriteZeroHit);
			cynes::dump<operation>(buffer, _foregroundEvaluationStep);
		}
	};

	class APU {
	public:
		APU(NES& nes);
		~APU();

	public:
		void power();
		void reset();

		void tick(bool reading, bool preventLoad = false);

		void write(uint8_t address, uint8_t value);

		uint8_t read(uint8_t address);

	private:
		NES& _nes;

	private:
		void updateCounters();
		void loadDeltaChannelByte(bool reading);

		void performDMA(uint8_t address);
		void performPendingDMA();

		void setFrameIRQ(bool irq);
		void setDeltaIRQ(bool irq);

	private:
		bool _latchCycle;

		uint8_t _delayDMA;
		uint8_t _addressDMA;

		bool _pendingDMA;

		uint8_t _openBus;

	private:
		uint32_t _frameCounterClock;
		uint32_t _delayFrameReset;

		uint8_t _channelCounters[0x4];

		bool _channelEnabled[0x4];
		bool _channelHalted[0x4];

		bool _stepMode;

		bool _inhibitFrameIRQ;
		bool _sendFrameIRQ;

		const uint8_t LENGTH_COUNTER_TABLE[0x20] = {
			0x0A, 0xFE, 0x14, 0x02, 0x28, 0x04, 0x50, 0x06, 0xA0, 0x08, 0x3C, 0x0A, 0x0E, 0x0C, 0x1A, 0x0E,
			0x0C, 0x10, 0x18, 0x12, 0x30, 0x14, 0x60, 0x16, 0xC0, 0x18, 0x48, 0x1A, 0x10, 0x1C, 0x20, 0x1E
		};

	private:
		uint16_t _deltaChannelRemainingBytes;
		uint16_t _deltaChannelSampleLength;
		uint16_t _deltaChannelPeriodCounter;
		uint16_t _deltaChannelPeriodLoad;

		uint8_t _deltaChannelBitsInBuffer;

		bool _deltaChannelShouldLoop;
		bool _deltaChannelEnableIRQ;
		bool _deltaChannelSampleBufferEmpty;

		bool _enableDMC;
		bool _sendDeltaChannelIRQ;

		const uint16_t PERIOD_DMC_TABLE[0x10] = {
			0x1AC, 0x17C, 0x154, 0x140, 0x11E, 0x0FE, 0x0E2, 0x0D6, 0x0BE, 0x0A0, 0x08E, 0x080, 0x06A, 0x054, 0x048, 0x036
		};

	private:
		enum Register : uint8_t {
			PULSE_1_0 = 0x00, PULSE_1_3 = 0x03, PULSE_2_0 = 0x04, PULSE_2_3 = 0x07, TRIANGLE_0 = 0x08, TRIANGLE_3 = 0x0B, NOISE_0 = 0x0C, NOISE_3 = 0x0F,
			DELTA_0 = 0x10, DELTA_3 = 0x13, OAM_DMA = 0x14, CTRL_STATUS = 0x15, FRAME_COUNTER = 0x17
		};

	public:
		template<DumpOperation operation, class T> void dump(T& buffer) {
			cynes::dump<operation>(buffer, _latchCycle);
			cynes::dump<operation>(buffer, _delayDMA);
			cynes::dump<operation>(buffer, _addressDMA);
			cynes::dump<operation>(buffer, _pendingDMA);
			cynes::dump<operation>(buffer, _openBus);

			cynes::dump<operation>(buffer, _frameCounterClock);
			cynes::dump<operation>(buffer, _delayFrameReset);
			cynes::dump<operation>(buffer, _channelCounters);
			cynes::dump<operation>(buffer, _channelEnabled);
			cynes::dump<operation>(buffer, _channelHalted);
			cynes::dump<operation>(buffer, _stepMode);
			cynes::dump<operation>(buffer, _inhibitFrameIRQ);
			cynes::dump<operation>(buffer, _sendFrameIRQ);

			cynes::dump<operation>(buffer, _deltaChannelRemainingBytes);
			cynes::dump<operation>(buffer, _deltaChannelSampleLength);
			cynes::dump<operation>(buffer, _deltaChannelPeriodCounter);
			cynes::dump<operation>(buffer, _deltaChannelPeriodLoad);
			cynes::dump<operation>(buffer, _deltaChannelBitsInBuffer);
			cynes::dump<operation>(buffer, _deltaChannelShouldLoop);
			cynes::dump<operation>(buffer, _deltaChannelEnableIRQ);
			cynes::dump<operation>(buffer, _deltaChannelSampleBufferEmpty);
			cynes::dump<operation>(buffer, _enableDMC);
			cynes::dump<operation>(buffer, _sendDeltaChannelIRQ);
		}
	};

	enum class MirroringMode : uint8_t {
		ONE_SCREEN_LOW, ONE_SCREEN_HIGH, HORIZONTAL, VERTICAL
	};

	class Mapper {
	public:
		Mapper(NES& nes, uint8_t bankSizePRG, uint8_t bankSizeCHR, uint8_t bankCountPRG, uint8_t bankCountCHR, MirroringMode mode);
		virtual ~Mapper();

	public:
		virtual void tick() { }
		virtual void notifyStateA12(bool state) { }

		virtual void writeCPU(uint16_t address, uint8_t value) { }

		uint16_t getMirroredAddress(uint16_t address) const;

		uint32_t getAddressCPU(uint16_t address) const;
		uint32_t getAddressPPU(uint16_t address) const;

		bool isRAMWritable() const;

	protected:
		NES& _nes;

	private:
		const uint8_t BANK_SIZE_PRG;
		const uint8_t BANK_SIZE_CHR;

		const uint16_t BANK_MASK_PRG;
		const uint16_t BANK_MASK_CHR;

	protected:
		const uint8_t BANK_COUNT_PRG;
		const uint8_t BANK_COUNT_CHR;

		uint32_t* _bankIndexPRG;
		uint32_t* _bankIndexCHR;

		MirroringMode _mode;

		bool _writableRAM;

	public:
		template<DumpOperation operation, class T> void dump(T& buffer) {
			cynes::dump<operation>(buffer, _bankIndexPRG, BANK_COUNT_PRG);
			cynes::dump<operation>(buffer, _bankIndexCHR, BANK_COUNT_CHR);
			cynes::dump<operation>(buffer, _mode);
			cynes::dump<operation>(buffer, _writableRAM);
		}
	};

	class Mapper000 : public Mapper {
	public:
		Mapper000(NES& nes, uint8_t bankCountPRG, uint8_t bankCountCHR, MirroringMode mode);
		~Mapper000();
	};

	class Mapper001 : public Mapper {
	public:
		Mapper001(NES& nes, uint8_t bankCountPRG, uint8_t bankCountCHR, MirroringMode mode);
		~Mapper001();

	public:
		virtual void writeCPU(uint16_t address, uint8_t value);

	private:
		uint8_t _counter;

		uint8_t _registerControl;
		uint8_t _registerLoad;

	public:
		template<DumpOperation operation, class T> void dump(T& buffer) {
			Mapper::dump<operation>(buffer);

			cynes::dump<operation>(buffer, _counter);
			cynes::dump<operation>(buffer, _registerControl);
			cynes::dump<operation>(buffer, _registerLoad);
		}
	};

	class Mapper002 : public Mapper {
	public:
		Mapper002(NES& nes, uint8_t bankCountPRG, uint8_t bankCountCHR, MirroringMode mode);
		~Mapper002();

	public:
		virtual void writeCPU(uint16_t address, uint8_t value);
	};

	class Mapper003 : public Mapper {
	public:
		Mapper003(NES& nes, uint8_t bankCountPRG, uint8_t bankCountCHR, MirroringMode mode);
		~Mapper003();

	public:
		virtual void writeCPU(uint16_t address, uint8_t value);
	};

	class Mapper004 : public Mapper {
	public:
		Mapper004(NES& nes, uint8_t bankCountPRG, uint8_t bankCountCHR, MirroringMode mode);
		~Mapper004();

	public:
		virtual void tick();
		virtual void notifyStateA12(bool state);

		virtual void writeCPU(uint16_t address, uint8_t value);

	private:
		uint32_t _tick;

		uint32_t _registers[0x8];

		uint16_t _counter;
		uint16_t _counterReload;

		uint8_t _targetRegister;

		bool _modePRG;
		bool _modeCHR;

		bool _enableIRQ;
		bool _shouldReloadIRQ;

	public:
		template<DumpOperation operation, class T> void dump(T& buffer) {
			Mapper::dump<operation>(buffer);

			cynes::dump<operation>(buffer, _tick);
			cynes::dump<operation>(buffer, _registers);
			cynes::dump<operation>(buffer, _counter);
			cynes::dump<operation>(buffer, _counterReload);
			cynes::dump<operation>(buffer, _targetRegister);
			cynes::dump<operation>(buffer, _modePRG);
			cynes::dump<operation>(buffer, _modeCHR);
			cynes::dump<operation>(buffer, _enableIRQ);
			cynes::dump<operation>(buffer, _shouldReloadIRQ);
		}
	};
}


#endif